"use strict";(self.webpackChunkdev_docs=self.webpackChunkdev_docs||[]).push([[6669],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>g});var o=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=o.createContext({}),s=function(e){var n=o.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=s(e.components);return o.createElement(p.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=s(t),m=r,g=c["".concat(p,".").concat(m)]||c[m]||d[m]||i;return t?o.createElement(g,a(a({ref:n},u),{},{components:t})):o.createElement(g,a({ref:n},u))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,a=new Array(i);a[0]=m;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[c]="string"==typeof e?e:r,a[1]=l;for(var s=2;s<i;s++)a[s]=t[s];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},31631:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>a,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var o=t(87462),r=(t(67294),t(3905));const i={},a="Booking Model",l={unversionedId:"api-design/Booking/models",id:"api-design/Booking/models",title:"Booking Model",description:"Booking",source:"@site/docs/api-design/Booking/models.md",sourceDirName:"api-design/Booking",slug:"/api-design/Booking/models",permalink:"/api-design/Booking/models",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api-design/Booking/models.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Booking Endpoint Implementation",permalink:"/api-design/Booking/endpoint_implementation"},next:{title:"Business Endpoint Implementation",permalink:"/api-design/Business/endpoints_implemtation"}},p={},s=[],u={toc:s};function c(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"booking-model"},"Booking Model"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Booking")),(0,r.kt)("p",null,"Fields:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"- id: Integer (primary key)\n- user_id: Integer (foreign key)\n- event_id: Integer (foreign key)\n- ticket_id: Integer (foreign key)\n- created_at: DateTime\n- updated_at: DateTime\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Relationships")),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A booking belongs to a user (one-to-many)"),(0,r.kt)("li",{parentName:"ul"},"A booking belongs to an event (one-to-many)"),(0,r.kt)("li",{parentName:"ul"},"A booking belongs to a ticket (one-to-many)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'class Booking(Base):\n    __tablename__ = "booking"\n    id = Column(Integer, primary_key=True, index=True)\n    user_id = Column(Integer, ForeignKey("user.id"))\n    event_id = Column(Integer, ForeignKey("event.id"))\n    ticket_id = Column(Integer, ForeignKey("ticket.id"))\n    created_at = Column(DateTime, default=func.now())\n    updated_at = Column(DateTime, default=func.now(), onupdate=func.now())\n\n    user = relationship("User", back_populates="bookings")\n    event = relationship("Event", back_populates="bookings")\n    ticket = relationship("Ticket", back_populates="bookings")\n    payment = relationship("Payment", back_populates="booking")\n')))}c.isMDXComponent=!0}}]);