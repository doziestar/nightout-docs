"use strict";(self.webpackChunkdev_docs=self.webpackChunkdev_docs||[]).push([[9777],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>y});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),s=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=s(e.components);return r.createElement(l.Provider,{value:n},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),c=s(t),d=a,y=c["".concat(l,".").concat(d)]||c[d]||m[d]||o;return t?r.createElement(y,i(i({ref:n},u),{},{components:t})):r.createElement(y,i({ref:n},u))}));function y(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=d;var p={};for(var l in n)hasOwnProperty.call(n,l)&&(p[l]=n[l]);p.originalType=e,p[c]="string"==typeof e?e:a,i[1]=p;for(var s=2;s<o;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},13352:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>p,toc:()=>s});var r=t(87462),a=(t(67294),t(3905));const o={},i="Payment Model",p={unversionedId:"api-design/Payment/models",id:"api-design/Payment/models",title:"Payment Model",description:"Payment",source:"@site/docs/api-design/Payment/models.md",sourceDirName:"api-design/Payment",slug:"/api-design/Payment/models",permalink:"/api-design/Payment/models",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api-design/Payment/models.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Payment Endpoints",permalink:"/api-design/Payment/endpoints"},next:{title:"Tickets Endpoints",permalink:"/api-design/Ticket/endpoints"}},l={},s=[],u={toc:s};function c(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"payment-model"},"Payment Model"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Payment")),(0,a.kt)("p",null,"Fields:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"- id: Integer (primary key)\n- user_id: Integer (foreign key)\n- booking_id: Integer (foreign key)\n- amount: Integer\n- created_at: DateTime\n- updated_at: DateTime\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"Relationships")),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A payment belongs to a user (one-to-many)"),(0,a.kt)("li",{parentName:"ul"},"A payment belongs to a booking (one-to-many)")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'class Payment(Base):\n    __tablename__ = "payment"\n    id = Column(Integer, primary_key=True, index=True)\n    user_id = Column(Integer, ForeignKey("user.id"))\n    booking_id = Column(Integer, ForeignKey("booking.id"))\n    amount = Column(Integer)\n    created_at = Column(DateTime, default=func.now())\n    updated_at = Column(DateTime, default=func.now(), onupdate=func.now())\n\n    user = relationship("User", back_populates="payments")\n    booking = relationship("Booking", back_populates="payment")\n')))}c.isMDXComponent=!0}}]);