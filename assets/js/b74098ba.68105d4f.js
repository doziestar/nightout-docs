"use strict";(self.webpackChunkdev_docs=self.webpackChunkdev_docs||[]).push([[4137],{3905:(i,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var e=n(67294);function o(i,t,n){return t in i?Object.defineProperty(i,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):i[t]=n,i}function a(i,t){var n=Object.keys(i);if(Object.getOwnPropertySymbols){var e=Object.getOwnPropertySymbols(i);t&&(e=e.filter((function(t){return Object.getOwnPropertyDescriptor(i,t).enumerable}))),n.push.apply(n,e)}return n}function r(i){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(i,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(i,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(i,t,Object.getOwnPropertyDescriptor(n,t))}))}return i}function s(i,t){if(null==i)return{};var n,e,o=function(i,t){if(null==i)return{};var n,e,o={},a=Object.keys(i);for(e=0;e<a.length;e++)n=a[e],t.indexOf(n)>=0||(o[n]=i[n]);return o}(i,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(i);for(e=0;e<a.length;e++)n=a[e],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(i,n)&&(o[n]=i[n])}return o}var c=e.createContext({}),f=function(i){var t=e.useContext(c),n=t;return i&&(n="function"==typeof i?i(t):r(r({},t),i)),n},p=function(i){var t=f(i.components);return e.createElement(c.Provider,{value:t},i.children)},d="mdxType",l={inlineCode:"code",wrapper:function(i){var t=i.children;return e.createElement(e.Fragment,{},t)}},u=e.forwardRef((function(i,t){var n=i.components,o=i.mdxType,a=i.originalType,c=i.parentName,p=s(i,["components","mdxType","originalType","parentName"]),d=f(n),u=o,m=d["".concat(c,".").concat(u)]||d[u]||l[u]||a;return n?e.createElement(m,r(r({ref:t},p),{},{components:n})):e.createElement(m,r({ref:t},p))}));function m(i,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof i||o){var a=n.length,r=new Array(a);r[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=i,s[d]="string"==typeof i?i:o,r[1]=s;for(var f=2;f<a;f++)r[f]=n[f];return e.createElement.apply(null,r)}return e.createElement.apply(null,n)}u.displayName="MDXCreateElement"},55476:(i,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>f});var e=n(87462),o=(n(67294),n(3905));const a={},r="Notifications API Endpoints",s={unversionedId:"api-design/Notifications/endpoints",id:"api-design/Notifications/endpoints",title:"Notifications API Endpoints",description:"Endpoints",source:"@site/docs/api-design/Notifications/endpoints.md",sourceDirName:"api-design/Notifications",slug:"/api-design/Notifications/endpoints",permalink:"/api-design/Notifications/endpoints",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api-design/Notifications/endpoints.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Tiktok",permalink:"/api-design/Integrations/Tiktok"},next:{title:"Notification Model",permalink:"/api-design/Notifications/models"}},c={},f=[{value:"Endpoints",id:"endpoints",level:2}],p={toc:f};function d(i){let{components:t,...n}=i;return(0,o.kt)("wrapper",(0,e.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"notifications-api-endpoints"},"Notifications API Endpoints"),(0,o.kt)("h2",{id:"endpoints"},"Endpoints"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"POST /api/notifications - Create a new notification for a specific user or business")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"GET /api/notifications/:id - Retrieve a specific notification by ID")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"PUT /api/notifications/:id - Update an existing notification by ID")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"DELETE /api/notifications/:id - Delete a notification by ID")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"GET /api/notifications - Retrieve a list of notifications (optionally filtered by query parameters):"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"recipient_id: Filter notifications by recipient ID"),(0,o.kt)("li",{parentName:"ul"},"type: Filter notifications by type (e.g. email, SMS, push)"),(0,o.kt)("li",{parentName:"ul"},"status: Filter notifications by status (e.g. sent, failed, pending)"),(0,o.kt)("li",{parentName:"ul"},"sort: Sort notifications by a specific field (e.g. recipient_id, created_at)"),(0,o.kt)("li",{parentName:"ul"},"limit: Limit the number of notifications returned in the response"),(0,o.kt)("li",{parentName:"ul"},"offset: Skip a certain number of notifications in the result set")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from typing import List, Optional\n\nfrom fastapi import FastAPI, HTTPException\nfrom sqlalchemy.orm import Session\n\nfrom models import Base, Notification, User, Business\nfrom schemas import NotificationCreate, NotificationUpdate, NotificationOut\nfrom database import engine, SessionLocal\n\nBase.metadata.create_all(bind=engine)\n\napp = FastAPI()\n\n\n# Dependency to get a database session\ndef get_db():\n    try:\n        db = SessionLocal()\n        yield db\n    finally:\n        db.close()\n\n\n@app.post("/api/notifications", response_model=NotificationOut)\ndef create_notification(notification: NotificationCreate, db: Session = Depends(get_db)):\n    recipient_type = notification.recipient_type\n    recipient_id = notification.recipient_id\n    if recipient_type == "user":\n        recipient = db.query(User).filter(User.id == recipient_id).first()\n    elif recipient_type == "business":\n        recipient = db.query(Business).filter(Business.id == recipient_id).first()\n    else:\n        raise HTTPException(status_code=400, detail="Invalid recipient type")\n    if recipient is None:\n        raise HTTPException(status_code=404, detail="Recipient not found")\n    db_notification = Notification(**notification.dict())\n    db.add(db_notification)\n    db.commit()\n    db.refresh(db_notification)\n    return db_notification\n\n\n@app.get("/api/notifications/{notification_id}", response_model=NotificationOut)\ndef get_notification(notification_id: int, db: Session = Depends(get_db)):\n    db_notification = db.query(Notification).filter(Notification.id == notification_id).first()\n    if db_notification is None:\n        raise HTTPException(status_code=404, detail="Notification not found")\n    return db_notification\n\n\n@app.put("/api/notifications/{notification_id}", response_model=NotificationOut)\ndef update_notification(notification_id: int, notification: NotificationUpdate, db: Session = Depends(get_db)):\n    db_notification = db.query(Notification).filter(Notification.id == notification_id).first()\n    if db_notification is None:\n        raise HTTPException(status_code=404, detail="Notification not found")\n    for field, value in notification.dict(exclude_unset=True).items():\n        setattr(db_notification, field, value)\n    db.commit()\n    db.refresh(db_notification)\n    return db_notification\n\n\n@app.delete("/api/notifications/{notification_id}")\ndef delete_notification(notification_id: int, db: Session = Depends(get_db)):\n    db_notification = db.query(Notification).filter(Notification.id == notification_id).first()\n    if db_notification is None:\n        raise HTTPException(status_code=404, detail="Notification not found")\n    db.delete(db_notification)\n    db.commit()\n    return {"message": "Notification deleted"}\n\n\n@app.get("/api/notifications", response_model=List[NotificationOut])\ndef get_notifications(\n    recipient_id: Optional[int] = None,\n    type: Optional[str] = None,\n    status: Optional[str] = None,\n    sort: Optional[str] = None,\n    limit: Optional[int] = None,\n    offset: Optional[int] = None,\n    db: Session = Depends(get_db)\n):\n    query = db.query(Notification)\n    if recipient_id is not None:\n        query = query.filter(Notification.recipient_id == recipient_id)\n    if type is not None:\n        query = query.filter(Notification.type == type)\n    if status is not None:\n        query = query.filter(Notification.status == status)\n    if sort is not None:\n        if sort.startswith("-"):\n            sort_field = getattr(Notification, sort[1:]).desc()\n        else:\n            sort_field = getattr(Notification, sort)\n        query = query.order_by(sort_field)\n    if limit is not None:\n        query = query.limit(limit)\n    if offset is not None:\n        query = query.offset(offset)\n    return query.all()\n')))}d.isMDXComponent=!0}}]);