"use strict";(self.webpackChunkdev_docs=self.webpackChunkdev_docs||[]).push([[217],{3905:(e,n,s)=>{s.d(n,{Zo:()=>c,kt:()=>g});var o=s(67294);function t(e,n,s){return n in e?Object.defineProperty(e,n,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[n]=s,e}function i(e,n){var s=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),s.push.apply(s,o)}return s}function r(e){for(var n=1;n<arguments.length;n++){var s=null!=arguments[n]?arguments[n]:{};n%2?i(Object(s),!0).forEach((function(n){t(e,n,s[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(s)):i(Object(s)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(s,n))}))}return e}function a(e,n){if(null==e)return{};var s,o,t=function(e,n){if(null==e)return{};var s,o,t={},i=Object.keys(e);for(o=0;o<i.length;o++)s=i[o],n.indexOf(s)>=0||(t[s]=e[s]);return t}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)s=i[o],n.indexOf(s)>=0||Object.prototype.propertyIsEnumerable.call(e,s)&&(t[s]=e[s])}return t}var d=o.createContext({}),p=function(e){var n=o.useContext(d),s=n;return e&&(s="function"==typeof e?e(n):r(r({},n),e)),s},c=function(e){var n=p(e.components);return o.createElement(d.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},l=o.forwardRef((function(e,n){var s=e.components,t=e.mdxType,i=e.originalType,d=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),u=p(s),l=t,g=u["".concat(d,".").concat(l)]||u[l]||m[l]||i;return s?o.createElement(g,r(r({ref:n},c),{},{components:s})):o.createElement(g,r({ref:n},c))}));function g(e,n){var s=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var i=s.length,r=new Array(i);r[0]=l;var a={};for(var d in n)hasOwnProperty.call(n,d)&&(a[d]=n[d]);a.originalType=e,a[u]="string"==typeof e?e:t,r[1]=a;for(var p=2;p<i;p++)r[p]=s[p];return o.createElement.apply(null,r)}return o.createElement.apply(null,s)}l.displayName="MDXCreateElement"},49105:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>p});var o=s(87462),t=(s(67294),s(3905));const i={},r=void 0,a={unversionedId:"api-design/Chat/endpoints",id:"api-design/Chat/endpoints",title:"endpoints",description:"Chat endpoints",source:"@site/docs/api-design/Chat/endpoints.md",sourceDirName:"api-design/Chat",slug:"/api-design/Chat/endpoints",permalink:"/api-design/Chat/endpoints",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api-design/Chat/endpoints.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Business Model",permalink:"/api-design/Business/models"},next:{title:"models",permalink:"/api-design/Chat/models"}},d={},p=[{value:"Chat endpoints",id:"chat-endpoints",level:2},{value:"Chat endpoint implementation",id:"chat-endpoint-implementation",level:2}],c={toc:p};function u(e){let{components:n,...s}=e;return(0,t.kt)("wrapper",(0,o.Z)({},c,s,{components:n,mdxType:"MDXLayout"}),(0,t.kt)("h2",{id:"chat-endpoints"},"Chat endpoints"),(0,t.kt)("ol",null,(0,t.kt)("li",{parentName:"ol"},"List conversations for user: GET chats/users/{user_id}/conversations"),(0,t.kt)("li",{parentName:"ol"},"Create conversation: POST chats/conversations"),(0,t.kt)("li",{parentName:"ol"},"Retrieve conversation: GET chats/conversations/{conversation_id}"),(0,t.kt)("li",{parentName:"ol"},"Update conversation: PUT chats/conversations/{conversation_id}"),(0,t.kt)("li",{parentName:"ol"},"Delete conversation: DELETE chats/conversations/{conversation_id}"),(0,t.kt)("li",{parentName:"ol"},"List messages for conversation: GET chats/conversations/{conversation_id}/messages"),(0,t.kt)("li",{parentName:"ol"},"Create message: POST chats/messages"),(0,t.kt)("li",{parentName:"ol"},"Retrieve message: GET chats/messages/{message_id}"),(0,t.kt)("li",{parentName:"ol"},"Update message: PUT chats/messages/{message_id}"),(0,t.kt)("li",{parentName:"ol"},"Delete message: DELETE chats/messages/{message_id}"),(0,t.kt)("li",{parentName:"ol"},"Create group: POST chats/groups"),(0,t.kt)("li",{parentName:"ol"},"Retrieve group: GET chats/groups/{group_id}"),(0,t.kt)("li",{parentName:"ol"},"Update group: PUT chats/groups/{group_id}"),(0,t.kt)("li",{parentName:"ol"},"Delete group: DELETE chats/groups/{group_id}"),(0,t.kt)("li",{parentName:"ol"},"List members for group: GET chats/groups/{group_id}/members"),(0,t.kt)("li",{parentName:"ol"},"Add member to group: POST chats/groups/{group_id}/members"),(0,t.kt)("li",{parentName:"ol"},"Remove member from group: DELETE chats/groups/{group_id}/members/{member_id}"),(0,t.kt)("li",{parentName:"ol"},"Create voice note: POST chats/voicenotes"),(0,t.kt)("li",{parentName:"ol"},"Retrieve voice note: GET chats/voicenotes/{voicenote_id}"),(0,t.kt)("li",{parentName:"ol"},"Update voice note: PUT chats/voicenotes/{voicenote_id}"),(0,t.kt)("li",{parentName:"ol"},"Delete voice note: DELETE chats/voicenotes/{voicenote_id}")),(0,t.kt)("h2",{id:"chat-endpoint-implementation"},"Chat endpoint implementation"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},'from fastapi import FastAPI, HTTPException\nfrom typing import List\nfrom sqlmodel import Session, select\nfrom models import User, Conversation, Message, Group, VoiceNote, Member, database\n\napp = FastAPI()\n\n# List conversations for user\n@app.get("/users/{user_id}/conversations", response_model=List[Conversation])\ndef list_conversations_for_user(user_id: int, skip: int = 0, limit: int = 100):\n    with Session(database) as session:\n        conversations = session.exec(select(Conversation).where(Conversation.participants.contains(user_id)).offset(skip).limit(limit)).all()\n        return conversations\n\n# Create conversation\n@app.post("/conversations", response_model=Conversation)\ndef create_conversation(conversation: Conversation):\n    with Session(database) as session:\n        session.add(conversation)\n        session.commit()\n        session.refresh(conversation)\n        return conversation\n\n# Retrieve conversation\n@app.get("/conversations/{conversation_id}", response_model=Conversation)\ndef retrieve_conversation(conversation_id: int):\n    with Session(database) as session:\n        conversation = session.get(Conversation, conversation_id)\n        if not conversation:\n            raise HTTPException(status_code=404, detail="Conversation not found")\n        return conversation\n\n# Update conversation\n@app.put("/conversations/{conversation_id}", response_model=Conversation)\ndef update_conversation(conversation_id: int, updated_conversation: Conversation):\n    with Session(database) as session:\n        conversation = session.get(Conversation, conversation_id)\n        if not conversation:\n            raise HTTPException(status_code=404, detail="Conversation not found")\n        conversation.participants = updated_conversation.participants\n        session.commit()\n        session.refresh(conversation)\n        return conversation\n\n# Delete conversation\n@app.delete("/conversations/{conversation_id}")\ndef delete_conversation(conversation_id: int):\n    with Session(database) as session:\n        conversation = session.get(Conversation, conversation_id)\n        if not conversation:\n            raise HTTPException(status_code=404, detail="Conversation not found")\n        session.delete(conversation)\n        session.commit()\n        return {"message": "Conversation deleted successfully"}\n\n# List messages for conversation\n@app.get("/conversations/{conversation_id}/messages", response_model=List[Message])\ndef list_messages_for_conversation(conversation_id: int, skip: int = 0, limit: int = 100):\n    with Session(database) as session:\n        messages = session.exec(select(Message).where(Message.recipient_id == conversation_id).offset(skip).limit(limit)).all()\n        return messages\n\n# Create message\n@app.post("/messages", response_model=Message)\ndef create_message(message: Message):\n    with Session(database) as session:\n        session.add(message)\n        session.commit()\n        session.refresh(message)\n        return message\n\n# Retrieve message\n@app.get("/messages/{message_id}", response_model=Message)\ndef retrieve_message(message_id: int):\n    with Session(database) as session:\n        message = session.get(Message, message_id)\n        if not message:\n            raise HTTPException(status_code=404, detail="Message not found")\n        return message\n\n# Update message\n@app.put("/messages/{message_id}", response_model=Message)\ndef update_message(message_id: int, updated_message: Message):\n    with Session(database) as session:\n        message = session.get(Message, message_id)\n        if not message:\n            raise HTTPException(status_code=404, detail="Message not found")\n        message.message_text = updated_message.message_text\n        message.message_type = updated_message.message_type\n        session.commit()\n        session.refresh(message)\n        return message\n\n# Delete message\n@app.delete("/messages/{message_id}")\ndef delete_message(message_id: int):\n    with Session(database) as session:\n        message = session.get(Message, message_id)\n        if not message:\n            raise HTTPException(status_code=404, detail="Message not found")\n        session.delete(message)\n        session.commit()\n        return {"message": "Message deleted successfully"}\n\n# Create a new group\n@app.post("/groups", response_model=schemas.Group)\ndef create_group(group: schemas.GroupCreate, db: Session = Depends(get_db)):\n    db_group = models.Group(name=group.name, description=group.description)\n    db.add(db_group)\n    db.commit()\n    db.refresh(db_group)\n    return db_group\n\n\n# Get a group by id\n@app.get("/groups/{group_id}", response_model=schemas.Group)\ndef read_group(group_id: int, db: Session = Depends(get_db)):\n    db_group = db.query(models.Group).filter(models.Group.id == group_id).first()\n    if not db_group:\n        raise HTTPException(status_code=404, detail="Group not found")\n    return db_group\n\n\n# Update a group by id\n@app.put("/groups/{group_id}", response_model=schemas.Group)\ndef update_group(group_id: int, group: schemas.GroupUpdate, db: Session = Depends(get_db)):\n    db_group = db.query(models.Group).filter(models.Group.id == group_id).first()\n    if not db_group:\n        raise HTTPException(status_code=404, detail="Group not found")\n    db_group.name = group.name\n    db_group.description = group.description\n    db.commit()\n    db.refresh(db_group)\n    return db_group\n\n\n# Delete a group by id\n@app.delete("/groups/{group_id}")\ndef delete_group(group_id: int, db: Session = Depends(get_db)):\n    db_group = db.query(models.Group).filter(models.Group.id == group_id).first()\n    if not db_group:\n        raise HTTPException(status_code=404, detail="Group not found")\n    db.delete(db_group)\n    db.commit()\n    return {"message": "Group deleted successfully"}\n\n\n# Get all members of a group\n@app.get("/groups/{group_id}/members", response_model=List[schemas.User])\ndef read_group_members(group_id: int, db: Session = Depends(get_db)):\n    db_group = db.query(models.Group).filter(models.Group.id == group_id).first()\n    if not db_group:\n        raise HTTPException(status_code=404, detail="Group not found")\n    return db_group.members\n\n\n# Add a user to a group\n@app.post("/groups/{group_id}/members", response_model=schemas.Group)\ndef add_group_member(group_id: int, user_id: int, db: Session = Depends(get_db)):\n    db_group = db.query(models.Group).filter(models.Group.id == group_id).first()\n    if not db_group:\n        raise HTTPException(status_code=404, detail="Group not found")\n    db_user = db.query(models.User).filter(models.User.id == user_id).first()\n    if not db_user:\n        raise HTTPException(status_code=404, detail="User not found")\n    db_group.members.append(db_user)\n    db.commit()\n    db.refresh(db_group)\n    return db_group\n\n# Create voice note\n@app.post("/voicenotes", response_model=VoiceNote)\ndef create_voice_note(voicenote: VoiceNote, db: Session = Depends(get_session)):\n    db.add(voicenote)\n    db.commit()\n    db.refresh(voicenote)\n    return voicenote\n\n# Retrieve voice note\n@app.get("/voicenotes/{voicenote_id}", response_model=VoiceNote)\ndef read_voice_note(voicenote_id: int, db: Session = Depends(get_session)):\n    voicenote = db.get(VoiceNote, voicenote_id)\n    if not voicenote:\n        raise HTTPException(status_code=404, detail="Voice note not found")\n    return voicenote\n\n# Update voice note\n@app.put("/voicenotes/{voicenote_id}", response_model=VoiceNote)\ndef update_voice_note(voicenote_id: int, voicenote: VoiceNote, db: Session = Depends(get_session)):\n    db_voicenote = db.get(VoiceNote, voicenote_id)\n    if not db_voicenote:\n        raise HTTPException(status_code=404, detail="Voice note not found")\n    update_data = voicenote.dict(exclude_unset=True)\n    for key, value in update_data.items():\n        setattr(db_voicenote, key, value)\n    db.commit()\n    db.refresh(db_voicenote)\n    return db_voicenote\n\n# Delete voice note\n@app.delete("/voicenotes/{voicenote_id}", status_code=status.HTTP_204_NO_CONTENT)\ndef delete_voice_note(voicenote_id: int, db: Session = Depends(get_session)):\n    voicenote = db.get(VoiceNote, voicenote_id)\n    if not voicenote:\n        raise HTTPException(status_code=404, detail="Voice note not found")\n    db.delete(voicenote)\n    db.commit()\n    return {"message": "Voice note deleted successfully"}\n')))}u.isMDXComponent=!0}}]);