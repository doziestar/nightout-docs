"use strict";(self.webpackChunkdev_docs=self.webpackChunkdev_docs||[]).push([[8735],{3905:(e,s,n)=>{n.d(s,{Zo:()=>b,kt:()=>m});var i=n(67294);function t(e,s,n){return s in e?Object.defineProperty(e,s,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[s]=n,e}function r(e,s){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);s&&(i=i.filter((function(s){return Object.getOwnPropertyDescriptor(e,s).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var s=1;s<arguments.length;s++){var n=null!=arguments[s]?arguments[s]:{};s%2?r(Object(n),!0).forEach((function(s){t(e,s,n[s])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(s){Object.defineProperty(e,s,Object.getOwnPropertyDescriptor(n,s))}))}return e}function a(e,s){if(null==e)return{};var n,i,t=function(e,s){if(null==e)return{};var n,i,t={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],s.indexOf(n)>=0||(t[n]=e[n]);return t}(e,s);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],s.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(t[n]=e[n])}return t}var u=i.createContext({}),d=function(e){var s=i.useContext(u),n=s;return e&&(n="function"==typeof e?e(s):o(o({},s),e)),n},b=function(e){var s=d(e.components);return i.createElement(u.Provider,{value:s},e.children)},p="mdxType",l={inlineCode:"code",wrapper:function(e){var s=e.children;return i.createElement(i.Fragment,{},s)}},c=i.forwardRef((function(e,s){var n=e.components,t=e.mdxType,r=e.originalType,u=e.parentName,b=a(e,["components","mdxType","originalType","parentName"]),p=d(n),c=t,m=p["".concat(u,".").concat(c)]||p[c]||l[c]||r;return n?i.createElement(m,o(o({ref:s},b),{},{components:n})):i.createElement(m,o({ref:s},b))}));function m(e,s){var n=arguments,t=s&&s.mdxType;if("string"==typeof e||t){var r=n.length,o=new Array(r);o[0]=c;var a={};for(var u in s)hasOwnProperty.call(s,u)&&(a[u]=s[u]);a.originalType=e,a[p]="string"==typeof e?e:t,o[1]=a;for(var d=2;d<r;d++)o[d]=n[d];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}c.displayName="MDXCreateElement"},82164:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>u,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>a,toc:()=>d});var i=n(87462),t=(n(67294),n(3905));const r={},o="Business Endpoint Implementation",a={unversionedId:"api-design/Business/endpoints_implemtation",id:"api-design/Business/endpoints_implemtation",title:"Business Endpoint Implementation",description:"Business",source:"@site/docs/api-design/Business/endpoints_implemtation.md",sourceDirName:"api-design/Business",slug:"/api-design/Business/endpoints_implemtation",permalink:"/api-design/Business/endpoints_implemtation",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api-design/Business/endpoints_implemtation.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Booking Model",permalink:"/api-design/Booking/models"},next:{title:"Business Model",permalink:"/api-design/Business/models"}},u={},d=[],b={toc:d};function p(e){let{components:s,...n}=e;return(0,t.kt)("wrapper",(0,i.Z)({},b,n,{components:s,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"business-endpoint-implementation"},"Business Endpoint Implementation"),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"Business")),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"POST /api/businesses: Create a new business."),(0,t.kt)("li",{parentName:"ul"},"GET /api/businesses/{id}: Retrieve a specific business by ID."),(0,t.kt)("li",{parentName:"ul"},"PUT /api/businesses/{id}: Update an existing business by ID."),(0,t.kt)("li",{parentName:"ul"},"DELETE /api/businesses/{id}: Delete a business by ID."),(0,t.kt)("li",{parentName:"ul"},"GET /api/businesses/{id}/events: Retrieve a list of events for a specific business by ID."),(0,t.kt)("li",{parentName:"ul"},"GET /api/businesses/{id}/notifications: Retrieve a list of notifications for a specific business by ID."),(0,t.kt)("li",{parentName:"ul"},"GET /api/businesses/{id}/tickets: Retrieve a list of tickets for a specific business by ID."),(0,t.kt)("li",{parentName:"ul"},"GET /api/businesses/{id}/bookings: Retrieve a list of bookings for a specific business by ID."),(0,t.kt)("li",{parentName:"ul"},"GET /api/businesses/{id}/payments: Retrieve a list of payments for a specific business by ID."),(0,t.kt)("li",{parentName:"ul"},"GET /api/businesses/{id}/users: Retrieve a list of users for a specific business by ID."),(0,t.kt)("li",{parentName:"ul"},"GET /api/businesses - Retrieve a list of businesses (optionally filtered by query parameters)",(0,t.kt)("pre",{parentName:"li"},(0,t.kt)("code",{parentName:"pre"},"- name: Filter businesses by name\n- category: Filter businesses by category (e.g. restaurant, hotel, retail)\n- location: Filter businesses by location (e.g. city, state, zip code)\n- sort: Sort businesses by a specific field (e.g. name, category, created_at)\n- limit: Limit the number of businesses returned in the response\n")),"offset: Skip a certain number of businesses in the result set")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},'\nfrom fastapi import FastAPI, Query\nfrom sqlalchemy.orm import Session\n\napp = FastAPI()\n\n@app.get("/api/businesses")\nasync def get_businesses(\n    name: str = Query(None),\n    category: str = Query(None),\n    location: str = Query(None),\n    sort: str = Query(None),\n    limit: int = Query(100),\n    offset: int = Query(0),\n    db: Session = Depends(get_db)\n):\n    query = db.query(Business)\n\n    if name:\n        query = query.filter(Business.name.ilike(f"%{name}%"))\n    if category:\n        query = query.filter(Business.category == category)\n    if location:\n        query = query.filter(Business.location == location)\n\n    if sort:\n        if sort.startswith("-"):\n            sort_column = getattr(Business, sort[1:]).desc()\n        else:\n            sort_column = getattr(Business, sort)\n        query = query.order_by(sort_column)\n\n    businesses = query.offset(offset).limit(limit).all()\n\n    return {"businesses": businesses}\n\n@app.post("/api/businesses/", response_model=schemas.Business)\ndef create_business(business: schemas.BusinessCreate, db: Session = Depends(get_db)):\n    db_business = models.Business(name=business.name, description=business.description)\n    db.add(db_business)\n    db.commit()\n    db.refresh(db_business)\n    return db_business\n\n@app.get("/api/businesses/{business_id}", response_model=schemas.Business)\ndef read_business(business_id: int, db: Session = Depends(get_db)):\n    db_business = db.query(models.Business).filter(models.Business.id == business_id).first()\n    if db_business is None:\n        raise HTTPException(status_code=404, detail="Business not found")\n    return db_business\n\n@app.put("/api/businesses/{business_id}", response_model=schemas.Business)\ndef update_business(business_id: int, business: schemas.BusinessUpdate, db: Session = Depends(get_db)):\n    db_business = db.query(models.Business).filter(models.Business.id == business_id).first()\n    if db_business is None:\n        raise HTTPException(status_code=404, detail="Business not found")\n    db_business.name = business.name\n    db_business.description = business.description\n    db_business.updated_at = datetime.utcnow()\n    db.commit()\n    db.refresh(db_business)\n    return db_business\n\n@app.delete("/api/businesses/{business_id}")\ndef delete_business(business_id: int, db: Session = Depends(get_db)):\n    db_business = db.query(models.Business).filter(models.Business.id == business_id).first()\n    if db_business is None:\n        raise HTTPException(status_code=404, detail="Business not found")\n    db.delete(db_business)\n    db.commit()\n    return {"message": "Business deleted"}\n\n@app.get("/api/businesses/{business_id}/events", response_model=List[schemas.Event])\ndef read_events_by_business(business_id: int, db: Session = Depends(get_db)):\n    db_events = db.query(models.Event).filter(models.Event.business_id == business_id).all()\n    return db_events\n\n@app.get("/api/businesses/{business_id}/notifications", response_model=List[schemas.Notification])\ndef read_notifications_by_business(business_id: int, db: Session = Depends(get_db)):\n    db_notifications = db.query(models.Notification).filter(models.Notification.business_id == business_id).all()\n    return db_notifications\n\n@app.get("/api/businesses/{business_id}/tickets", response_model=List[schemas.Ticket])\ndef read_tickets_by_business(business_id: int, db: Session = Depends(get_db)):\n    db_tickets = db.query(models.Ticket).filter(models.Ticket.business_id == business_id).all()\n    return db_tickets\n\n@app.get("/api/businesses/{business_id}/bookings", response_model=List[schemas.Booking])\ndef read_bookings_by_business(business_id: int, db: Session = Depends(get_db)):\n    db_bookings = db.query(models.Booking).filter(models.Booking.business_id == business_id).all()\n    return db_bookings\n\n@app.get("/api/businesses/{business_id}/payments", response_model=List[schemas.Payment])\ndef read_payments_by_business(business_id: int, db: Session = Depends(get_db)):\n    db_payments = db.query(models.Payment).filter(models.Payment.business_id == business_id).all()\n    return db_payments\n\n@app.get("/api/businesses/{business_id}/users", response_model=List[schemas.User])\ndef read_users_by_business(business_id: int, db: Session = Depends(get_db)):\n    db_users = db.query(models.User).filter(models.User.business_id == business_id).all()\n    return db_users\n    \n')))}p.isMDXComponent=!0}}]);