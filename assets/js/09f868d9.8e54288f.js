"use strict";(self.webpackChunkdev_docs=self.webpackChunkdev_docs||[]).push([[309],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>y});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),l=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(p.Provider,{value:n},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=l(t),d=a,y=c["".concat(p,".").concat(d)]||c[d]||m[d]||o;return t?r.createElement(y,s(s({ref:n},u),{},{components:t})):r.createElement(y,s({ref:n},u))}));function y(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=d;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i[c]="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=t[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},51838:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var r=t(87462),a=(t(67294),t(3905));const o={},s="User Model",i={unversionedId:"api-design/User/models",id:"api-design/User/models",title:"User Model",description:"User",source:"@site/docs/api-design/User/models.md",sourceDirName:"api-design/User",slug:"/api-design/User/models",permalink:"/api-design/User/models",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api-design/User/models.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"User",permalink:"/api-design/User/endpoints"},next:{title:"Frontend-Design",permalink:"/category/frontend-design"}},p={},l=[],u={toc:l};function c(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"user-model"},"User Model"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"User")),(0,a.kt)("p",null,"Fields:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"- id: String (primary key)\n- name: String\n- email: String (unique)\n- hashed password: String\n- created_at: DateTime\n- updated_at: DateTime\n- is_active: Boolean\n- is_superuser: Boolean\n- is_business: Boolean\n- is_verified: Boolean\n- is_blocked: Boolean\n- is_deleted: Boolean\n- is_online: Boolean\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"Relationships")),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"- A user has many bookings (one-to-many)\n- A user has many payments (one-to-many)\n- A user has many messages sent (one-to-many)\n- A user has many messages received (one-to-many)\n- A user has many voice notes sent (one-to-many)\n- A user has many voice notes received (one-to-many)\n- A user has many conversations (many-to-many)\n- A user has many groups (many-to-many)\n- A user has many notifications (one-to-many)\n- A user has many bookings (one-to-many)\n- A user has many payments (one-to-many)\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class User(Base):\n    __tablename__ = 'user'\n\n    id = Column(String, primary_key=True, index=True, default=uuid4())\n    name = Column(String)\n    email = Column(String, unique=True, index=True)\n    password = Column(String)\n    created_at = Column(DateTime, default=func.now())\n    updated_at = Column(DateTime, default=func.now(), onupdate=func.now())\n    messages_sent = relationship('Message', back_populates='sender')\n    messages_received = relationship('Message', back_populates='recipient')\n    conversations = relationship('Conversation', secondary=conversation_participant_table, back_populates='participants')\n    groups = relationship('Group', secondary=group_membership_table, back_populates='members')\n    voice_notes_sent = relationship('VoiceNote', back_populates='sender')\n    voice_notes_received = relationship('VoiceNote', back_populates='recipient')\n    notifications = relationship('Notification', back_populates='user')\n    bookings = relationship(\"Booking\", back_populates=\"user\")\n    payments = relationship(\"Payment\", back_populates=\"user\")\n")))}c.isMDXComponent=!0}}]);