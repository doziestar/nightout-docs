"use strict";(self.webpackChunkdev_docs=self.webpackChunkdev_docs||[]).push([[3610],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>f});var i=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,o=function(e,n){if(null==e)return{};var t,i,o={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=i.createContext({}),p=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=p(e.components);return i.createElement(l.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},c=i.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(t),c=o,f=d["".concat(l,".").concat(c)]||d[c]||m[c]||r;return t?i.createElement(f,a(a({ref:n},u),{},{components:t})):i.createElement(f,a({ref:n},u))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,a=new Array(r);a[0]=c;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[d]="string"==typeof e?e:o,a[1]=s;for(var p=2;p<r;p++)a[p]=t[p];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}c.displayName="MDXCreateElement"},65129:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var i=t(87462),o=(t(67294),t(3905));const r={},a="Booking Endpoint Implementation",s={unversionedId:"api-design/Booking/endpoint_implementation",id:"api-design/Booking/endpoint_implementation",title:"Booking Endpoint Implementation",description:"Endpoints",source:"@site/docs/api-design/Booking/endpoint_implementation.md",sourceDirName:"api-design/Booking",slug:"/api-design/Booking/endpoint_implementation",permalink:"/api-design/Booking/endpoint_implementation",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api-design/Booking/endpoint_implementation.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Api-Design",permalink:"/category/api-design"},next:{title:"Booking Model",permalink:"/api-design/Booking/models"}},l={},p=[{value:"Endpoints",id:"endpoints",level:3}],u={toc:p};function d(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,i.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"booking-endpoint-implementation"},"Booking Endpoint Implementation"),(0,o.kt)("h3",{id:"endpoints"},"Endpoints"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"POST /api/bookings - Create a new booking for a specific event and user")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"GET /api/bookings/:id - Retrieve a specific booking by ID")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"PUT /api/bookings/:id - Update an existing booking by ID")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"DELETE /api/bookings/:id - Delete a booking by ID\nTicket")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"GET /api/bookings - Retrieve a list of bookings (optionally filtered by query parameters)"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"user_id: Filter bookings by user ID"),(0,o.kt)("li",{parentName:"ul"},"event_id: Filter bookings by event ID"),(0,o.kt)("li",{parentName:"ul"},"status: Filter bookings by status (e.g. confirmed, pending, cancelled)"),(0,o.kt)("li",{parentName:"ul"},"sort: Sort bookings by a specific field (e.g. event_id, created_at)"),(0,o.kt)("li",{parentName:"ul"},"limit: Limit the number of bookings returned in the response"),(0,o.kt)("li",{parentName:"ul"},"offset: Skip a certain number of bookings in the result set")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\nfrom fastapi import APIRouter, Query\nfrom sqlalchemy.orm import Session\nfrom . import models, schemas\nfrom .database import get_db\n\nrouter = APIRouter(prefix="/api", tags=["bookings"])\n\n\n@router.get("/bookings")\ndef get_bookings(\n    db: Session = Depends(get_db),\n    user_id: Optional[int] = Query(None),\n    event_id: Optional[int] = Query(None),\n    status: Optional[str] = Query(None),\n    sort: Optional[str] = Query(None),\n    limit: Optional[int] = Query(100),\n    offset: Optional[int] = Query(0)\n):\n    query = db.query(models.Booking)\n    \n    if user_id:\n        query = query.filter(models.Booking.user_id == user_id)\n    \n    if event_id:\n        query = query.filter(models.Booking.event_id == event_id)\n    \n    if status:\n        query = query.filter(models.Booking.status == status)\n    \n    if sort:\n        if sort.startswith("-"):\n            field = getattr(models.Booking, sort[1:], None)\n            if field is not None:\n                query = query.order_by(field.desc())\n        else:\n            field = getattr(models.Booking, sort, None)\n            if field is not None:\n                query = query.order_by(field.asc())\n    \n    query = query.limit(limit).offset(offset).all()\n    \n    return query\n')))}d.isMDXComponent=!0}}]);