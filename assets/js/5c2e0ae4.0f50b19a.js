"use strict";(self.webpackChunkdev_docs=self.webpackChunkdev_docs||[]).push([[5141],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=p(n),c=i,f=u["".concat(l,".").concat(c)]||u[c]||m[c]||a;return n?r.createElement(f,s(s({ref:t},d),{},{components:n})):r.createElement(f,s({ref:t},d))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,s=new Array(a);s[0]=c;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[u]="string"==typeof e?e:i,s[1]=o;for(var p=2;p<a;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},11714:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>p});var r=n(87462),i=(n(67294),n(3905));const a={},s="Event Endpoint implemtation",o={unversionedId:"api-design/Events/endpoints",id:"api-design/Events/endpoints",title:"Event Endpoint implemtation",description:"Endpoints",source:"@site/docs/api-design/Events/endpoints.md",sourceDirName:"api-design/Events",slug:"/api-design/Events/endpoints",permalink:"/api-design/Events/endpoints",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api-design/Events/endpoints.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Users",permalink:"/api-design/Database/Users"},next:{title:"Models Associated with Events",permalink:"/api-design/Events/models"}},l={},p=[{value:"Endpoints",id:"endpoints",level:3}],d={toc:p};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"event-endpoint-implemtation"},"Event Endpoint implemtation"),(0,i.kt)("h3",{id:"endpoints"},"Endpoints"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"POST /api/events - Create a new event for a specific business")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"GET /api/events/:id - Retrieve a specific event by ID")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"PUT /api/events/:id - Update an existing event by ID")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"DELETE /api/events/:id - Delete an event by ID")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"GET /api/events - Retrieve a list of events (optionally filtered by query parameters)"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"business_id: Filter events by business ID"),(0,i.kt)("li",{parentName:"ul"},"start_date: Filter events by start date"),(0,i.kt)("li",{parentName:"ul"},"end_date: Filter events by end date"),(0,i.kt)("li",{parentName:"ul"},"sort: Sort events by a specific field (e.g. name, start_date, created_at)"),(0,i.kt)("li",{parentName:"ul"},"limit: Limit the number of events returned in the response"),(0,i.kt)("li",{parentName:"ul"},"offset: Skip a certain number of events in the result set")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'\nfrom fastapi import APIRouter, Query\nfrom sqlalchemy.orm import Session\nfrom . import models, schemas\nfrom .database import get_db\n\nrouter = APIRouter(prefix="/api", tags=["events"])\n\n\n@router.get("/events")\ndef get_events(\n    db: Session = Depends(get_db),\n    business_id: Optional[int] = Query(None),\n    start_date: Optional[datetime] = Query(None),\n    end_date: Optional[datetime] = Query(None),\n    sort: Optional[str] = Query(None),\n    limit: Optional[int] = Query(100),\n    offset: Optional[int] = Query(0)\n):\n    query = db.query(models.Event)\n    \n    if business_id:\n        query = query.filter(models.Event.business_id == business_id)\n    \n    if start_date:\n        query = query.filter(models.Event.start_date >= start_date)\n    \n    if end_date:\n        query = query.filter(models.Event.end_date <= end_date)\n    \n    if sort:\n        if sort.startswith("-"):\n            field = getattr(models.Event, sort[1:], None)\n            if field is not None:\n                query = query.order_by(field.desc())\n        else:\n            field = getattr(models.Event, sort, None)\n            if field is not None:\n                query = query.order_by(field.asc())\n    \n    query = query.limit(limit).offset(offset).all()\n    \n    return query\n\n')))}u.isMDXComponent=!0}}]);